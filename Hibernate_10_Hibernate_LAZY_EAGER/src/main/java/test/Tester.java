package test;

import java.sql.Date;
import java.time.LocalDate;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import model.ChiTietDonHang;
import model.DonHang;
import util.HibernateUtil;

public class Tester {
	public static void main(String[] args) {
		try {
			SessionFactory sf = HibernateUtil.getSessionFactory();
			if (sf != null) {
				Session ss = sf.openSession();
				Transaction tr = ss.beginTransaction();
				
//				LocalDate ld = LocalDate.of(2025, 04, 04);
//				DonHang dh1 = new DonHang();
//				dh1.setTenKhachHang("Ng·ªçc Th·ª• L√¢m Phong");
//				dh1.setNgayMua(Date.valueOf(ld));
//				
//				for(int i=0; i<10000; i++) {
//					ChiTietDonHang detail1 = new ChiTietDonHang();
//					detail1.setTenSanPham( i + " ");
//					detail1.setGiaBan(5000);
//					detail1.setSoLuong(1);
//					detail1.setThanhTien(5000);
//					detail1.setDonHang(dh1);
//					dh1.addChiTietDonHang(detail1);
//				}
//				
//				ss.saveOrUpdate(dh1);
				
				long batDau = System.currentTimeMillis();
				DonHang dh = ss.load(DonHang.class, 1);
				long ketThuc = System.currentTimeMillis();
				System.out.println(dh.toString());
				List<ChiTietDonHang> ds = dh.getChiTietDonHang();
				for (ChiTietDonHang detail : ds) {
					System.out.println(detail.toString());
				}
				System.out.println("Th·ªùi gian th·ª±c hi·ªán c√¢u l·ªánh l√†: " + (ketThuc-batDau));
				
				tr.commit();
				ss.close();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
/*
 * Hi·ªÉu ƒë∆°n gi·∫£n EAGER l√† load t·∫•t c·∫£ d·ªØ li·ªáu l√™n ngay l·∫≠p t·ª©c, load entity 1
 * th√¨ load lu√¥n c·∫£ entity n l√™n 
 * LAZY l√† d√πng ƒë·∫øn ƒë√¢u load ƒë·∫øn ƒë√≥ 
 * Khi n√†o d√πng g√¨? 
 * Lazy: d√πng khi d·ªØ li·ªáu con KH√îNG ph·∫£i l√∫c n√†o c≈©ng c·∫ßn. Default, ti·∫øt
 * ki·ªám. 
 * Eager: d√πng khi ch·∫Øc ch·∫Øn s·∫Ω c·∫ßn d·ªØ li·ªáu con, tr√°nh query nhi·ªÅu l·∫ßn.
 * Immediate: Hibernate lo. C·ª© bi·∫øt n√≥ t·ªìn t·∫°i l√† ƒë∆∞·ª£c üòé. 
 * ch·ªët l·∫°i : Hibernate c√≥ 3 chi·∫øn l∆∞·ª£c loading: Lazy (tr√¨ ho√£n), Eager (t·∫£i
 * ngay), v√† Immediate (b·∫Øt bu·ªôc t·∫£i ngay l·∫≠p t·ª©c - n·ªôi b·ªô Hibernate quy·∫øt
 * ƒë·ªãnh). Khi d√πng annotation @OneToMany, @ManyToOne... ch·ªâ c√≥ th·ªÉ set Lazy ho·∫∑c
 * Eager th√¥ng qua fetch = FetchType.X.
 */